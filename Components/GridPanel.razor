@using LayoutDesigner.Interfaces
@using LayoutDesigner.Pages
@inherits LayoutComponent
@implements ILayoutComponent
@implements IDropAreaContainer

<DropArea StyleClass="drop-area-panel" PreviewMode="PreviewMode" DesignMode="DesignMode" style="@GetStyle()"></DropArea>

@code {
	public override bool CanResizeHorizontally => true;
	public override bool CanResizeVertically => true;

	[Parameter]
	public int Columns { get; set; } = 1;

	[Parameter]
	public int Rows { get; set; } = 1;

	[Parameter]
	public int Gap { get; set; } = 5;

	[Parameter]
	[PropertyGridUIEditor(typeof(UITypeEditors.StringArrayTypeEditor))]
	public string[] ColumnWidths { get; set; } = new string[] { "1fr" };

	[Parameter]
	[PropertyGridUIEditor(typeof(UITypeEditors.StringArrayTypeEditor))]
	public string[] RowHeights { get; set; } = new string[] { "1fr" };

	public GridPanel()
	{
		Padding = new Models.Margin(30, 30, 30, 30);
	}

	protected override Task OnParametersSetAsync()
	{
		if (Columns != ColumnWidths.Length)
		{
			var newWidths = new string[Columns];
			int minLength = Math.Min(Columns, ColumnWidths.Length);
			Array.Copy(ColumnWidths, newWidths, minLength);
			for (int i = minLength; i < Columns; ++i)
				newWidths[i] = "1fr";
			ColumnWidths = newWidths;
		}

		if (Rows != RowHeights.Length)
		{
			var newHeights = new string[Rows];
			int minLength = Math.Min(Rows, RowHeights.Length);
			Array.Copy(RowHeights, newHeights, minLength);
			for (int i = minLength; i < Rows; ++i)
				newHeights[i] = "1fr";
			RowHeights = newHeights;
		}

		return base.OnParametersSetAsync();
	}

	protected override string GetStyle()
	{
		var style = base.GetStyle();
		if (!PreviewMode)
			style += $";display: grid; " +
					 $"grid-template-columns: {string.Join(" ", ColumnWidths)}; " +
					 $"grid-template-rows: {string.Join(" ", RowHeights)}; " +
					 $"gap: {Gap}px; ";
		return style;
	}
}
