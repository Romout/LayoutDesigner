@using LayoutDesigner.Models
@using System.Reflection
@using LayoutDesigner.Pages
@using Newtonsoft.Json

@code {

	[Parameter]
	public string Name { get; set; } = "";

	[Parameter]
	[System.ComponentModel.Browsable(false)]
	public Guid Id { get; set; }

	[Parameter]
	[System.ComponentModel.Browsable(false)]
	public bool PreviewMode { get; set; }

	[Parameter]
	[System.ComponentModel.Browsable(false)]
	public bool DesignMode { get; set; }

	[Parameter]
	[PropertyGridUIEditor(typeof(UITypeEditors.MarginUITypeEditor))]
	public Models.Margin Margin { get; set; } = new Models.Margin();

	[Parameter]
	[PropertyGridUIEditor(typeof(UITypeEditors.MarginUITypeEditor))]
	public Models.Margin Padding { get; set; } = new Models.Margin();

	[Parameter]
	public int Width { get; set; } = 120;

	[Parameter]
	public int Height { get; set; } = 80;

	[CascadingParameter]
	public Container? Container { get; set; }

	[CascadingParameter]
	public LayoutControlData? LayoutControlData { get; set; }

	public bool CanResize => CanResizeHorizontally || CanResizeVertically;
	public virtual bool CanResizeHorizontally => false;
	public virtual bool CanResizeVertically => false;

	protected bool _autoBindParameters = true;

	private bool _containerEventsRegistered = false;
	private PropertyInfo[] _properties;

	public IEnumerable<(string Name, object Value, Type type)> GetProperties()
	{
		if (_properties == null)
			_properties = GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance);
		foreach (var property in _properties)
		{
			if (property.GetCustomAttribute<ParameterAttribute>() != null && 
				property.GetCustomAttribute<CascadingParameterAttribute>() == null)
				yield return (property.Name, property.GetValue(this), property.PropertyType);
		}
	}

	public override Task SetParametersAsync(ParameterView view)
	{
		if (_autoBindParameters && LayoutControlData?.Parameters != null)
		{
			var parameters = LayoutControlData.Parameters;
			var properties = GetProperties();
			foreach (var property in properties)
			{
				if (!parameters.ContainsKey(property.Name) || !Equals(parameters[property.Name], property.Value))
					parameters[property.Name] = property.Value;
			}
		}
		return base.SetParametersAsync(view);
	}

	public bool HasParameterChanged<TParameterType>(ParameterView parameters, string parameterName, TParameterType value)
	{
		if (parameters.TryGetValue<TParameterType>(parameterName, out var result))
		{
			return !EqualityComparer<TParameterType>.Default.Equals(result, value);
		}
		return false;
	}

	protected virtual string GetStyle()
	{
		var style = $"Margin: {Margin};Padding: {Padding};";
		if (CanResize)
			style += $"; Width: {Width}px; Height: {Height}px;";
		if (PreviewMode)
			style += ";Width:100%;";
		return style;
	}
}
