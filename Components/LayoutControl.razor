@using LayoutDesigner.Models
@using LayoutDesigner.Pages

@implements IDisposable

	@if (LayoutControlData != null)
	{
		<div @key="_parametersKey">
			<CascadingValue Value="LayoutControlData">
				<Selectable HideSelection="@(LayoutControlData != null ? !LayoutControlData.Selectable : true)">
					<DynamicComponent Type="LayoutControlData.Type" Parameters="LayoutControlData.Parameters" @ref="_dynamicComponent" />
				</Selectable>
			</CascadingValue>
		</div>
	}

@code {

	[Parameter] public LayoutControlData? LayoutControlData { get; set; }

	[CascadingParameter]
	public Container? Container { get; set; }

	private int _parametersVersion = 0;
	private string _parametersKey = string.Empty;
	private DynamicComponent? _dynamicComponent;
	private bool _containerEventsRegistered = false;

	public LayoutComponent? GetLayoutComponent()
	{
		return (LayoutComponent?)_dynamicComponent?.Instance;
	}
	private string GetParametersKey() => $"{(LayoutControlData?.ObjectID ?? 0)}_{_parametersVersion}";

	protected override void OnParametersSet()
	{
		if (Container != null && !_containerEventsRegistered)
		{
			Container.StateChanged += OnStateChanged;
			_containerEventsRegistered = true;
		}

		if (LayoutControlData != null)
		{
			LayoutControlData.ParametersChanged -= OnParametersChanged;
			LayoutControlData.ParametersChanged += OnParametersChanged;
		}
	}

	void IDisposable.Dispose()
	{
		if (Container != null)
			Container.StateChanged -= OnStateChanged;
		if (LayoutControlData != null)
			LayoutControlData.ParametersChanged -= OnParametersChanged;
	}

	private void OnStateChanged(LayoutControlData data)
	{
		if (data == LayoutControlData)
			StateHasChanged();
	}

	private void OnParametersChanged()
	{
		_parametersVersion++;
		_parametersKey = GetParametersKey();
		StateHasChanged();
	}
}
