@using LayoutDesigner.Interfaces
@using LayoutDesigner.Pages
@inherits LayoutComponent
@implements ILayoutComponent
@implements IDropAreaContainer

<div style="@GetStyle()">
	<DropArea StyleClass="drop-area-panel" PreviewMode="PreviewMode" DesignMode="DesignMode" style="@_gridStyle"></DropArea>
</div>

@code {
	public override bool CanResizeHorizontally => true;
	public override bool CanResizeVertically => true;

	private string _gridStyle
	{
		get
		{
			return $"display: grid; " +
				$"grid-template-columns: {string.Join(" ", ColumnWidths)}; " +
				$"grid-template-rows: {string.Join(" ", RowHeights)}; " +
				$"gap: {Gap}px; ";
		}
	}
	[Parameter]
	public int Columns { get; set; } = 1;

	[Parameter]
	public int Rows { get; set; } = 1;

	[Parameter]
	public int Gap { get; set; } = 5;

	[Parameter]
	[PropertyGridUIEditor(typeof(UITypeEditors.StringArrayTypeEditor))]
	public string[] ColumnWidths { get; set; } = new string[] { "1fr" };

	[Parameter]
	[PropertyGridUIEditor(typeof(UITypeEditors.StringArrayTypeEditor))]
	public string[] RowHeights { get; set; } = new string[] { "1fr" };


	public override Task SetParametersAsync(ParameterView view)
	{
		if (HasParameterChanged(view, nameof(Columns), Columns))
		{
			int columns = view.GetValueOrDefault<int>(nameof(Columns));
			if (columns >= 1)
			{
				var newWidths = new string[columns];
				Array.Copy(ColumnWidths, newWidths, Math.Min(columns, ColumnWidths.Length));
				if (LayoutControlData != null)
					LayoutControlData.Parameters[nameof(ColumnWidths)] = newWidths;
				ColumnWidths = newWidths;
			}
		}
		if (HasParameterChanged(view, nameof(Rows), Rows))
		{
			int rows = view.GetValueOrDefault<int>(nameof(Rows));
			if (rows >= 1)
			{
				var newHeights = new string[rows];
				Array.Copy(RowHeights, newHeights, Math.Min(rows, RowHeights.Length));
				if (LayoutControlData != null)
					LayoutControlData.Parameters[nameof(RowHeights)] = newHeights;
				RowHeights = newHeights;
			}
		}
		return base.SetParametersAsync(view);
	}
}
