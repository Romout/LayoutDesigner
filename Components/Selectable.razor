@using LayoutDesigner.Models
@using LayoutDesigner.Pages
@implements IDisposable
@inject IJSRuntime JS

<div class="@selectedClass" id="navi" style="left:@LeftPx;top:@TopPx;width:@WidthPx;height:@HeightPx;" 
	@onclick="Select" @onclick:stopPropagation="true"></div>
<div @onclick="Select" @onclick:stopPropagation="true" @ref="contentContainer">
	@ChildContent
</div>

@code {

	private class PositionAndSize
	{
		public double left { get; set; }
		public double top { get; set; }
		public double width { get; set; }
		public double height { get; set; }
	}


	[CascadingParameter] Container? Container { get; set; }
	[CascadingParameter] public LayoutControlData? LayoutControlData { get; set; }

	[Parameter] public RenderFragment? ChildContent { get; set; }
	[Parameter] public bool HideSelection { get; set; }

	private ElementReference contentContainer;
	private ElementReference selectionBox;

	private PositionAndSize _pos = new ();

	private string LeftPx => $"{_pos.left}px";
	private string TopPx => $"{_pos.top}px";
	private string HeightPx => $"{_pos.height}px";
	private string WidthPx => $"{_pos.width}px";

	private bool _containerEventsRegistered = false;
	private Guid _id;
	private string selectedClass = "";

	public async Task UpdateElementSize()
	{
		if (!string.IsNullOrEmpty(contentContainer.Id))
			_pos = await JS.InvokeAsync<PositionAndSize>("getElementSize", contentContainer, LayoutControlData?.IsContainer ?? false ? 0 : 2);	}


	private void Select()
	{
		if (LayoutControlData != null && LayoutControlData.Selectable)
			Container?.Select(LayoutControlData);
		else
			Container?.ClearSelection();
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		if (Container != null && !_containerEventsRegistered) 
		{
			Container.SelectionChanged += OnSelectionChanged;
			_containerEventsRegistered = true;

			OnSelectionChanged(Container.Selection);
		}
	}

	void IDisposable.Dispose()
	{
		if (Container != null)
			Container.SelectionChanged -= OnSelectionChanged;
	}

	private bool IsSelected => Container?.Selection == LayoutControlData && !HideSelection;

	private void OnSelectionChanged(LayoutControlData selectedData)
	{
		var oldClass = selectedClass;
		selectedClass = (selectedData == LayoutControlData && !HideSelection) ? "selected" : "";
		if (oldClass != selectedClass)
			StateHasChanged();
	}

	protected override async void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);
		await UpdateElementSize();
	}

	private bool _resizing;
	private double _startX, _startY;
	private int _startWidth, _startHeight;

	private void StartResize(MouseEventArgs e, string handle)
	{
		_resizing = true;
		_startX = e.ClientX;
		_startY = e.ClientY;
		_startWidth = LayoutControlData?.Width ?? 120;
		_startHeight = LayoutControlData?.Height ?? 40;
		// Attach mousemove/mouseup handlers (see below)
	}

	// Handle mousemove/mouseup to update size and clear _resizing
}
