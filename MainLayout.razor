@using LayoutDesigner.Models
@using LayoutDesigner.Pages
@implements IDisposable
@inherits LayoutComponentBase
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
	<Container @ref="Container">
		<MudAppBar>
			<!--<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />-->
			Layout Designer
			<MudIconButton Icon="@Icons.Material.Filled.FileOpen" Color="Color.Inherit" Edge="Edge.End" @onclick="Container.Load" id="load"/><label for="load">Load</label>
			<MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Inherit" Edge="Edge.End" @onclick="Container.Save" id="save"/><label for="save">Save</label>
			<MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Inherit" Edge="Edge.End" @onclick="Container.DeleteSelectedComponent" Disabled="Container?.Selection == null" id="delete"/><label for="delete">Delete</label>
		</MudAppBar>
		<MudDrawer Open="@true">
			<ComponentList/>
		</MudDrawer>
		<MudMainContent> 
			@Body 
		</MudMainContent>
	</Container>
</MudLayout>

@code {
	private Container? Container { get; set; }

	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);

		if (firstRender && Container != null)
			Container.SelectionChanged += OnSelectionChanged;
	}

	void IDisposable.Dispose()
	{
		if (Container != null)
			Container.SelectionChanged -= OnSelectionChanged;
	}

	private void OnSelectionChanged(LayoutControlData? selectedData)
	{
		StateHasChanged();
	}
}