@using System.Reflection
@using LayoutDesigner.Components
@using LayoutDesigner.Interfaces
@using LayoutDesigner.Models
<ul class="component-list">
@foreach (var component in Components)
{
	RenderFragment renderFragment = (builder) => { 
		builder.OpenComponent(0, component); 
		builder.AddAttribute(1, nameof(ILayoutComponent.PreviewMode), true); 
		builder.CloseComponent(); 
	};
	
	<li class="draggable" draggable="true" @ondragstart="@(() => HandleDragStart(component))">
		@renderFragment
	</li>
	<li class="component-label">@(component.Name)</li>
}
</ul>
<PropertyGrid />

@code {

	[CascadingParameter] Container? Container { get; set; }

	public List<Type> Components { get; set; } = new List<Type>();

	protected override void OnInitialized()
	{
		base.OnInitialized();

		Assembly.GetExecutingAssembly().GetTypes()
			.Where(t => t.Namespace == "LayoutDesigner.Components" && typeof(ILayoutComponent).IsAssignableFrom(t))
			.ToList()
			.ForEach(t => Components.Add(t));
	}

	private void HandleDragStart(Type componentType)
	{
		bool isContainer = typeof(IDropAreaContainer).IsAssignableFrom(componentType);
		Container.Payload = new LayoutControlData()
			{
				Type = componentType,
				Parameters = new Dictionary<string, object>()
				{
					{ "Id", Guid.NewGuid() },
					{ "DesignMode", true },
				},
				Selectable = true,
				IsContainer = isContainer
			};

		LayoutComponent component = (LayoutComponent)Activator.CreateInstance(componentType);
		foreach (var property in component.GetProperties())
			Container.Payload.Parameters.Add(property.Name, property.Value);
	}

	private IEnumerable<(string Name, object Value, Type Type)> GetProperties()
	{
		List<(string, object, Type)> result = new List<(string, object, Type)>();
		if (Container?.Selection != null)
		{
			var properties = Container.Selection.Type.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly);
			foreach (var property in properties)
			{
				if (Container.Selection.Parameters.ContainsKey(property.Name))
					result.Add((property.Name, Container.Selection.Parameters[property.Name], property.PropertyType));
			}
		}
		return result;
	}
}