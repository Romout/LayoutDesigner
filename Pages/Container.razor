@using LayoutDesigner.Components
@using LayoutDesigner.Helpers
@using LayoutDesigner.Interfaces
@using LayoutDesigner.Models
@using Newtonsoft.Json
@using System.Reflection
@inject IJSRuntime JS

<div class="container" 
	@onmousemove="@OnMouseMove"
	@onmouseup="@OnMouseUp">
	<CascadingValue Value="this">
		@ChildContent
	</CascadingValue>
</div>

<input @ref="_fileInput" type="file" style="display:none" @onchange="OnFileSelected" />

@code {
	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	public LayoutControlData? Payload { get; set; }

	public LayoutControlData Root { get; set; }

	public LayoutControlData? Selection { get; private set; }
	public event Action<LayoutControlData?>? SelectionChanged;
	public event Action<LayoutControlData?>? StateChanged;
	public event Action<MouseEventArgs>? MouseMove;
	public event Action<MouseEventArgs>? MouseUp;

	private ElementReference _fileInput;

	public Container()
	{
		Root = new LayoutControlData()
			{
				Type = typeof(VerticalPanel),
				IsContainer = true,
			};
		Root.Parameters["Padding"] = new Models.Margin() { Top = 30, Bottom = 30, Left = 30, Right = 30 };
	}

	public void Select(LayoutControlData? selectedData)
	{
		if (Selection != selectedData)
		{
			Selection = selectedData;
			SelectionChanged?.Invoke(selectedData);
		}
	}
	public void ClearSelection()
	{
		Select(null);
	}

	public async Task Load()
	{
		await TriggerFileDialogAsync();
	}

	public async Task Save()
	{
		var json = JsonConvert.SerializeObject(Root);
		await DownloadFileFromStream(json);
	}

	private async Task DownloadFileFromStream(string json)
	{
		var fileName = "layout.json";

		using var fileStream = new MemoryStream();
		using var writer = new StreamWriter(fileStream);

		await writer.WriteAsync(json);
		await writer.FlushAsync();
		fileStream.Seek(0, SeekOrigin.Begin);

		using var streamRef = new DotNetStreamReference(fileStream, true);
		await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
	}

	[JSInvokable]
	public void OnFileLoaded(string fileContent)
	{
		if (!string.IsNullOrWhiteSpace(fileContent))
		{
			var result = JsonConvert.DeserializeObject<LayoutControlData>(fileContent);
			if (result != null)
			{
				ConvertTypes(result);
				Root = result;
				StateHasChanged();
			}
		}
	}

	private void ConvertTypes(LayoutControlData data)
	{
		var properties = data.Type.GetProperties(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance)
			.Where(p => p.GetCustomAttribute<ParameterAttribute>() != null);
		foreach (var key in data.Parameters.Keys)
		{
			var property = properties.FirstOrDefault(p => p.Name == key);
			if (property != null)
				data.Parameters[key] = TypeConversion.Convert(data.Parameters[key], property.PropertyType);
		}

		foreach (var child in data.Children)
			ConvertTypes(child);
	}

	private async Task OnFileSelected(ChangeEventArgs e)
	{
		// Use JS interop to read the file as text and call OnFileLoaded
		await JS.InvokeVoidAsync("readFileAsText", _fileInput, DotNetObjectReference.Create(this));
		await JS.InvokeVoidAsync("clearFileInput", _fileInput); // <-- Reset after use
	}

	public async Task TriggerFileDialogAsync()
	{
		await JS.InvokeVoidAsync("triggerElementClick", _fileInput);
	}

	public void DeleteSelectedComponent()
	{
		if (Selection != null)
		{
			Root.Remove(Selection);
			Select(null);
			StateHasChanged();
		}
	}

	public void NotifyStateChanged(LayoutControlData data)
	{
		StateChanged?.Invoke(data);
	}

	private void OnMouseMove(MouseEventArgs e)
	{
		MouseMove?.Invoke(e);
	}

	private void OnMouseUp(MouseEventArgs e)
	{
		MouseUp?.Invoke(e);
	}
}
