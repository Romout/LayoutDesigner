@using LayoutDesigner.Components
@using LayoutDesigner.Interfaces
@using LayoutDesigner.Models
@inherits LayoutComponent
@implements ILayoutComponent

<ul class="dropzone @(dropClass != "" ? dropClass : "dropzone-border") @StyleClass"
	ondragover="event.preventDefault();"
	ondragstart="event.dataTransfer.setData('', event.target.id);"
	@ondrop="HandleDrop"
	@ondragenter="HandleDragEnter"
	@ondragleave="HandleDragLeave">

	@if (LayoutControlData?.Children != null)
	{
		for (int i = 0; i < LayoutControlData.Children.Count; ++i)
		{
			int _i = i;
			<div class="component draggable" draggable="true" @ondragstart="@(() => HandleDragStart(_i))" @ondrop:stopPropagation="LayoutControlData.Children[_i].IsContainer">
				<LayoutControl Data="LayoutControlData.Children[_i]" @ref="_controls[_i]"/>
			</div>
		}
	}
</ul>

@code {
	[CascadingParameter] Container? Container { get; set; }

	[Parameter] public string StyleClass { get; set; } = "drop-area-vertical";

	private string dropClass = "";
	private List<LayoutControl> _controls = new List<LayoutControl>();

	private void HandleDragEnter()
	{
		if (PreviewMode || (Container?.Payload != null && LayoutControlData != null && LayoutControlData.Children.Contains(Container.Payload)))
			dropClass = "no-drop";
		else
			dropClass ="can-drop";
	}

	private void HandleDragLeave()
	{
		dropClass = "";
	}

	private void HandleDrop()
	{
		if (LayoutControlData?.Children != null && Container?.Payload != null && !LayoutControlData.Children.Contains(Container.Payload))
		{
			LayoutControlData.Children.Add(Container.Payload);
			if (Container.Payload.DragSource != null)
				Container.Payload.DragSource.RemoveChild(Container.Payload);
			_controls.Add(null);
			Container.Payload = null;
			StateHasChanged();
		}
		dropClass = "";
	}

	private void UpdateParameters(int index)
	{
		var instance = _controls[index].GetLayoutComponent();
		var properties = LayoutControlData.Children[index].Parameters;
		properties.Clear();
		foreach (var propertyInfo in LayoutControlData.Children[index].Type.GetProperties())
		{
			if (propertyInfo.GetCustomAttributes(typeof(ParameterAttribute), true).Length > 0 && propertyInfo.Name != nameof(LayoutComponent.LayoutControlData))
			{
				properties.Add(propertyInfo.Name, propertyInfo.GetValue(instance));
			}
		}
	}

	private void HandleDragStart(int index)
	{
		if (Container != null && Container.Payload == null)
		{
			UpdateParameters(index);
			Container.Payload = LayoutControlData.Children[index];
			Container.Payload.DragSource = this;
		}
	}

	private void RemoveChild(LayoutControlData childData)
	{
		LayoutControlData.Children.Remove(childData);
		StateHasChanged();
	}
}
