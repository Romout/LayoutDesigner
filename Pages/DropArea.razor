@using LayoutDesigner.Interfaces
@using LayoutDesigner.Models
@implements ILayoutComponent

<ul class="dropzone @StyleClass @dropClass"
	ondragover="event.preventDefault();"
	ondragstart="event.dataTransfer.setData('', event.target.id);"
	@ondrop="HandleDrop"
	@ondragenter="HandleDragEnter"
	@ondragleave="HandleDragLeave">

	@for (int i = 0; i < components.Count; ++i)
	{
		int _i = i;
		<div class="component draggable" draggable="true" @ondragstart="@(() => HandleDragStart(_i))">
			<DynamicComponent Type="@(components[_i])" Parameters="@(parameters[_i])" @ref="dynamicComponents[_i]"/>
		</div>
	}
</ul>

@code {
	[CascadingParameter] Container? Container { get; set; }

	[Parameter] public bool PreviewMode { get; set; }
	[Parameter] public bool DesignMode { get; set; }
	[Parameter] public string StyleClass { get; set; } = "drop-area-vertical";

	private string dropClass = "";
	private List<Type> components = new List<Type>();
	private List<DynamicComponent> dynamicComponents = new List<DynamicComponent>();
	private List<Dictionary<string, object>> parameters = new List<Dictionary<string, object>>();

	private void HandleDragEnter()
	{
		dropClass = PreviewMode ? "no-drop" : "can-drop";
	}

	private void HandleDragLeave()
	{
		dropClass = "";
	}

	private void HandleDrop()
	{
		dropClass = "";
		if (Container.Payload != null && !PreviewMode)
		{
			if (Container.Payload.Caller != null)
				Container.Payload.Caller.RemoveComponent(Container.Payload.CallerIndex);

			components.Add(Container.Payload.ComponentType);
			parameters.Add(Container.Payload.Parameters);
			dynamicComponents.Add(null);
			Container.Payload = null;
		}
	}

	private void UpdateParameters(int index)
	{
		var instance = dynamicComponents[index].Instance;
		var properties = parameters[index];
		properties.Clear();
		foreach (var propertyInfo in components[index].GetProperties())
		{
			if (propertyInfo.GetCustomAttributes(typeof(ParameterAttribute), true).Length > 0)
			{
				properties.Add(propertyInfo.Name, propertyInfo.GetValue(instance));
			}
		}
	}

	private void HandleDragStart(int index)
	{
		if (Container.Payload == null)
		{
			UpdateParameters(index);
			Container.Payload = new DragInformation()
				{
					ComponentType = components[index],
					Parameters = parameters[index],
					Caller = this,
					CallerIndex = index,
				};
		}
	}

	private void RemoveComponent(int index)
	{
		components.RemoveAt(index);
		parameters.RemoveAt(index);
		StateHasChanged();
	}
}
