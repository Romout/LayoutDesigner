@using LayoutDesigner.Interfaces
@using LayoutDesigner.Models
@implements ILayoutComponent

<ul class="dropzone @StyleClass @dropClass"
	ondragover="event.preventDefault();"
	ondragstart="event.dataTransfer.setData('', event.target.id);"
	@ondrop="HandleDrop"
	@ondragenter="HandleDragEnter"
	@ondragleave="HandleDragLeave">

	@for (int i = 0; i < Components.Count; ++i)
	{
		int _i = i;
		<div class="component draggable" draggable="true" @ondragstart="@(() => HandleDragStart(_i))" @ref="componentContainer">
			@if (otherInstances[_i] != null)
			{
				@otherInstances[_i]
			}
			else
			{
				<DynamicComponent Type="@(Components[_i])" Parameters="parameters" @ref="componentInstances[_i]" />
			}
		</div>
	}
</ul>

@code {
	[CascadingParameter] Container? Container { get; set; }

	[Parameter] public bool PreviewMode { get; set; }
	[Parameter] public bool DesignMode { get; set; }
	[Parameter] public string StyleClass { get; set; } = "drop-area-vertical";

	private object? componentContainer;

	private string dropClass = "";
	private List<Type> Components = new List<Type>();
	private List<DynamicComponent> componentInstances = new List<DynamicComponent>();
	private List<ComponentBase> otherInstances = new List<ComponentBase>();
	private Dictionary<string, object> parameters = new Dictionary<string, object>()
	{
		{ "DesignMode", true }
	};

	private void HandleDragEnter()
	{
		dropClass = PreviewMode ? "no-drop" : "can-drop";
	}

	private void HandleDragLeave()
	{
		dropClass = "";
	}

	private void HandleDrop()
	{
		dropClass = "";
		if ((Container.Payload != null || Container.PayloadComponent != null) && !PreviewMode)
		{
			if (Container.PayloadComponent != null)
			{
				Components.Add(Container.PayloadComponent.Instance.Instance.GetType());
				otherInstances.Add((ComponentBase)Container.PayloadComponent.Instance.Instance);
				componentInstances.Add(null);
				Container.PayloadComponent.Caller.RemoveComponent(Container.PayloadComponent.CallerIndex);
				Container.PayloadComponent = null;
			}
			else
			{
				Components.Add(Container.Payload);
				otherInstances.Add(null);
				componentInstances.Add(null);
				Container.Payload = null;
			}
		}
	}

	private void HandleDragStart(int index)
	{
		System.Diagnostics.Trace.WriteLine(index);
		Container.PayloadComponent = new DragInformation()
			{
				Instance = componentInstances[index],
				CallerIndex = index,
				Caller = this,
			};
	}

	private void RemoveComponent(int index)
	{
		Components.RemoveAt(index);
		componentInstances.RemoveAt(index);
	}
}
