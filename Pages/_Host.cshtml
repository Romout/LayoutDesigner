@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace LayoutDesigner.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <base href="~/" />
    <link href="css/site.css?version=0.1" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link href="LayoutDesigner.styles.css" rel="stylesheet" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
      const arrayBuffer = await contentStreamReference.arrayBuffer();
      const blob = new Blob([arrayBuffer]);
      const url = URL.createObjectURL(blob);
      const anchorElement = document.createElement('a');
      anchorElement.href = url;
      anchorElement.download = fileName ?? '';
      anchorElement.click();
      anchorElement.remove();
      URL.revokeObjectURL(url);
    }

    window.readFileAsText = (input, dotNetRef) => {
        if (input.files.length === 0) return;
        const file = input.files[0];
        const reader = new FileReader();
        reader.onload = () => {
            dotNetRef.invokeMethodAsync('OnFileLoaded', reader.result);
        };
        reader.readAsText(file);
    };

    window.triggerElementClick = (element) => {
        element.click();
    };
    window.clearFileInput = function(element) {
        if (element) element.value = "";
    };

    window.getElementSize = function(element, childIndex) {
        if (childIndex > 0)
        {
            for (var i = 0; i < childIndex; i++)
                element = element.firstElementChild;
        }
        if (element != null) {
		    var rect = element.getBoundingClientRect();
		    return { left:rect.left, top:rect.top, width: rect.width, height: rect.height };
        }
		return { left: 0, top: 0, width: 0, height: 0 };
    }
</script>

<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
</body>
</html>
